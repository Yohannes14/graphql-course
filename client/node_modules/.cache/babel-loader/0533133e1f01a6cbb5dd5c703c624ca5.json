{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { cloneDeep, compact, getOperationDefinition, Observable, iterateObserversSafely, isNonEmptyArray, fixObservableSubclass, getQueryDefinition } from \"../utilities/index.js\";\nvar assign = Object.assign,\n  hasOwnProperty = Object.hasOwnProperty;\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n      queryInfo = _a.queryInfo,\n      options = _a.options;\n    var _this = _super.call(this, function (observer) {\n      try {\n        var subObserver = observer._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch (_a) {}\n      var first = !_this.observers.size;\n      _this.observers.add(observer);\n      var last = _this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n      if (first) {\n        _this.reobserve().catch(function () {});\n      }\n      return function () {\n        if (_this.observers.delete(observer) && !_this.observers.size) {\n          _this.tearDownQuery();\n        }\n      };\n    }) || this;\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.queryInfo = queryInfo;\n    _this.queryManager = queryManager;\n    _this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    _this.isTornDown = false;\n    var _b = queryManager.defaultOptions.watchQuery,\n      _c = _b === void 0 ? {} : _b,\n      _d = _c.fetchPolicy,\n      defaultFetchPolicy = _d === void 0 ? \"cache-first\" : _d;\n    var _e = options.fetchPolicy,\n      fetchPolicy = _e === void 0 ? defaultFetchPolicy : _e,\n      _f = options.initialFetchPolicy,\n      initialFetchPolicy = _f === void 0 ? fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy : _f;\n    _this.options = __assign(__assign({}, options), {\n      initialFetchPolicy: initialFetchPolicy,\n      fetchPolicy: fetchPolicy\n    });\n    _this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n    var opDef = getOperationDefinition(_this.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    return _this;\n  }\n  Object.defineProperty(ObservableQuery.prototype, \"query\", {\n    get: function () {\n      return this.queryManager.transform(this.options.query).document;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    get: function () {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function (result) {\n          resolve(result);\n          _this.observers.delete(observer);\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n      var subscription = _this.subscribe(observer);\n    });\n  };\n  ObservableQuery.prototype.getCurrentResult = function (saveAsLastResult) {\n    if (saveAsLastResult === void 0) {\n      saveAsLastResult = true;\n    }\n    var lastResult = this.getLastResult(true);\n    var networkStatus = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || NetworkStatus.ready;\n    var result = __assign(__assign({}, lastResult), {\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    });\n    var _a = this.options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? \"cache-first\" : _a;\n    if (skipCacheDataFor(fetchPolicy) || this.queryManager.transform(this.options.query).hasForcedResolvers) {} else if (this.waitForOwnResult) {\n      this.queryInfo['updateWatch']();\n    } else {\n      var diff = this.queryInfo.getDiff();\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n      if (equal(result.data, {})) {\n        result.data = void 0;\n      }\n      if (diff.complete) {\n        delete result.partial;\n        if (diff.complete && result.networkStatus === NetworkStatus.loading && (fetchPolicy === 'cache-first' || fetchPolicy === 'cache-only')) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n      if (__DEV__ && !diff.complete && !this.options.partialRefetch && !result.loading && !result.data && !result.error) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n    return result;\n  };\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult, variables) {\n    return !this.last || !equal(this.last.result, newResult) || variables && !equal(this.last.variables, variables);\n  };\n  ObservableQuery.prototype.getLast = function (key, variablesMustMatch) {\n    var last = this.last;\n    if (last && last[key] && (!variablesMustMatch || equal(last.variables, this.variables))) {\n      return last[key];\n    }\n  };\n  ObservableQuery.prototype.getLastResult = function (variablesMustMatch) {\n    return this.getLast(\"result\", variablesMustMatch);\n  };\n  ObservableQuery.prototype.getLastError = function (variablesMustMatch) {\n    return this.getLast(\"error\", variablesMustMatch);\n  };\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.last;\n    this.isTornDown = false;\n  };\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    this.queryManager.resetErrors(this.queryId);\n  };\n  ObservableQuery.prototype.refetch = function (variables) {\n    var _a;\n    var reobserveOptions = {\n      pollInterval: 0\n    };\n    var fetchPolicy = this.options.fetchPolicy;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      var queryDef = getQueryDefinition(this.query);\n      var vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(function (v) {\n        return v.variable.name.value === \"variables\";\n      })) {\n        __DEV__ && invariant.warn(\"Called refetch(\".concat(JSON.stringify(variables), \") for query \").concat(((_a = queryDef.name) === null || _a === void 0 ? void 0 : _a.value) || JSON.stringify(queryDef), \", which does not declare a $variables variable.\\nDid you mean to call refetch(variables) instead of refetch({ variables })?\"));\n      }\n    }\n    if (variables && !equal(this.options.variables, variables)) {\n      reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  };\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign(__assign({}, this.options), {\n      query: this.query\n    }), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: \"no-cache\"\n    });\n    var qid = this.queryManager.generateQueryId();\n    var queryInfo = this.queryInfo;\n    var originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n    var updatedQuerySet = new Set();\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      _this.queryManager.removeQuery(qid);\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n      _this.queryManager.cache.batch({\n        update: function (cache) {\n          var updateQuery = fetchMoreOptions.updateQuery;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: _this.query,\n              variables: _this.variables,\n              returnPartialData: true,\n              optimistic: false\n            }, function (previous) {\n              return updateQuery(previous, {\n                fetchMoreResult: fetchMoreResult.data,\n                variables: combinedOptions.variables\n              });\n            });\n          } else {\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data\n            });\n          }\n        },\n        onWatchUpdated: function (watch) {\n          updatedQuerySet.add(watch.query);\n        }\n      });\n      return fetchMoreResult;\n    }).finally(function () {\n      if (!updatedQuerySet.has(_this.query)) {\n        reobserveCacheFirst(_this);\n      }\n    });\n  };\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables,\n      context: options.context\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n        __DEV__ && invariant.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    return this.reobserve(newOptions);\n  };\n  ObservableQuery.prototype.setVariables = function (variables) {\n    if (equal(this.variables, variables)) {\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n    this.options.variables = variables;\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n    return this.reobserve({\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var queryManager = this.queryManager;\n    var result = queryManager.cache.diff({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n    var newResult = mapFn(result, {\n      variables: this.variables\n    });\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  };\n  ObservableQuery.prototype.stopPolling = function () {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  };\n  ObservableQuery.prototype.applyNextFetchPolicy = function (reason, options) {\n    if (options.nextFetchPolicy) {\n      var _a = options.fetchPolicy,\n        fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n        _b = options.initialFetchPolicy,\n        initialFetchPolicy = _b === void 0 ? fetchPolicy : _b;\n      if (fetchPolicy === \"standby\") {} else if (typeof options.nextFetchPolicy === \"function\") {\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason: reason,\n          options: options,\n          observable: this,\n          initialFetchPolicy: initialFetchPolicy\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n    return options.fetchPolicy;\n  };\n  ObservableQuery.prototype.fetch = function (options, newNetworkStatus) {\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager['fetchConcastWithInfo'](this.queryId, options, newNetworkStatus);\n  };\n  ObservableQuery.prototype.updatePolling = function () {\n    var _this = this;\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n    var _a = this,\n      pollingInfo = _a.pollingInfo,\n      pollInterval = _a.options.pollInterval;\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n    __DEV__ ? invariant(pollInterval, 'Attempted to start a polling query without a polling interval.') : invariant(pollInterval, 13);\n    var info = pollingInfo || (this.pollingInfo = {});\n    info.interval = pollInterval;\n    var maybeFetch = function () {\n      if (_this.pollingInfo) {\n        if (!isNetworkRequestInFlight(_this.queryInfo.networkStatus)) {\n          _this.reobserve({\n            fetchPolicy: _this.options.initialFetchPolicy === 'no-cache' ? 'no-cache' : 'network-only'\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n      ;\n    };\n    var poll = function () {\n      var info = _this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n    poll();\n  };\n  ObservableQuery.prototype.updateLastResult = function (newResult, variables) {\n    if (variables === void 0) {\n      variables = this.variables;\n    }\n    this.last = __assign(__assign({}, this.last), {\n      result: this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult),\n      variables: variables\n    });\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.last.error;\n    }\n    return this.last;\n  };\n  ObservableQuery.prototype.reobserveAsConcast = function (newOptions, newNetworkStatus) {\n    var _this = this;\n    this.isTornDown = false;\n    var useDisposableConcast = newNetworkStatus === NetworkStatus.refetch || newNetworkStatus === NetworkStatus.fetchMore || newNetworkStatus === NetworkStatus.poll;\n    var oldVariables = this.options.variables;\n    var oldFetchPolicy = this.options.fetchPolicy;\n    var mergedOptions = compact(this.options, newOptions || {});\n    var options = useDisposableConcast ? mergedOptions : assign(this.options, mergedOptions);\n    if (!useDisposableConcast) {\n      this.updatePolling();\n      if (newOptions && newOptions.variables && !equal(newOptions.variables, oldVariables) && options.fetchPolicy !== \"standby\" && options.fetchPolicy === oldFetchPolicy) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n    this.waitForOwnResult && (this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy));\n    var finishWaitingForOwnResult = function () {\n      if (_this.concast === concast) {\n        _this.waitForOwnResult = false;\n      }\n    };\n    var variables = options.variables && __assign({}, options.variables);\n    var _a = this.fetch(options, newNetworkStatus),\n      concast = _a.concast,\n      fromLink = _a.fromLink;\n    var observer = {\n      next: function (result) {\n        finishWaitingForOwnResult();\n        _this.reportResult(result, variables);\n      },\n      error: function (error) {\n        finishWaitingForOwnResult();\n        _this.reportError(error, variables);\n      }\n    };\n    if (!useDisposableConcast && fromLink) {\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n      this.concast = concast;\n      this.observer = observer;\n    }\n    concast.addObserver(observer);\n    return concast;\n  };\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n  };\n  ObservableQuery.prototype.observe = function () {\n    this.reportResult(this.getCurrentResult(false), this.variables);\n  };\n  ObservableQuery.prototype.reportResult = function (result, variables) {\n    var lastError = this.getLastError();\n    if (lastError || this.isDifferentFromLastResult(result, variables)) {\n      if (lastError || !result.partial || this.options.returnPartialData) {\n        this.updateLastResult(result, variables);\n      }\n      iterateObserversSafely(this.observers, 'next', result);\n    }\n  };\n  ObservableQuery.prototype.reportError = function (error, variables) {\n    var errorResult = __assign(__assign({}, this.getLastResult()), {\n      error: error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false\n    });\n    this.updateLastResult(errorResult, variables);\n    iterateObserversSafely(this.observers, 'error', this.last.error = error);\n  };\n  ObservableQuery.prototype.hasObservers = function () {\n    return this.observers.size > 0;\n  };\n  ObservableQuery.prototype.tearDownQuery = function () {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n    this.stopPolling();\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  };\n  return ObservableQuery;\n}(Observable);\nexport { ObservableQuery };\nfixObservableSubclass(ObservableQuery);\nexport function reobserveCacheFirst(obsQuery) {\n  var _a = obsQuery.options,\n    fetchPolicy = _a.fetchPolicy,\n    nextFetchPolicy = _a.nextFetchPolicy;\n  if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      nextFetchPolicy: function () {\n        this.nextFetchPolicy = nextFetchPolicy;\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n        return fetchPolicy;\n      }\n    });\n  }\n  return obsQuery.reobserve();\n}\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  __DEV__ && invariant.error('Unhandled error', error.message, error.stack);\n}\nexport function logMissingFieldErrors(missing) {\n  if (__DEV__ && missing) {\n    __DEV__ && invariant.debug(\"Missing cache result fields: \".concat(JSON.stringify(missing)), missing);\n  }\n}\nfunction skipCacheDataFor(fetchPolicy) {\n  return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n}","map":{"version":3,"mappings":"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","names":["invariant","equal","NetworkStatus","isNetworkRequestInFlight","cloneDeep","compact","getOperationDefinition","Observable","iterateObserversSafely","isNonEmptyArray","fixObservableSubclass","getQueryDefinition","Object","hasOwnProperty","__extends","_a","queryManager","queryInfo","options","_super","observer","subObserver","_subscription","_observer","error","defaultSubscriptionObserverErrorCallback","first","_this","observers","size","add","last","result","next","reobserve","catch","delete","tearDownQuery","Set","waitForOwnResult","skipCacheDataFor","fetchPolicy","isTornDown","defaultOptions","_c","_d","defaultFetchPolicy","_f","initialFetchPolicy","queryId","generateQueryId","opDef","query","queryName","name","value","ObservableQuery","transform","document","variables","Promise","resolve","reject","removeQuery","setTimeout","subscription","unsubscribe","subscribe","saveAsLastResult","lastResult","getLastResult","networkStatus","ready","__assign","loading","hasForcedResolvers","diff","getDiff","complete","returnPartialData","data","partial","__DEV__","partialRefetch","logMissingFieldErrors","missing","updateLastResult","newResult","key","variablesMustMatch","getLast","resetErrors","reobserveOptions","pollInterval","call","queryDef","vars","variableDefinitions","some","variable","concat","resetLastWrite","refetch","fetchMoreOptions","combinedOptions","qid","originalNetworkStatus","fetchMore","notifyOnNetworkStatusChange","observe","updatedQuerySet","fetchQuery","then","cache","batch","update","updateQuery","optimistic","previous","fetchMoreResult","writeQuery","onWatchUpdated","watch","finally","has","reobserveCacheFirst","startGraphQLSubscription","context","subscriptionData","err","onError","subscriptions","newOptions","setVariables","mapFn","broadcastQueries","updatePolling","reason","nextFetchPolicy","_b","observable","newNetworkStatus","setObservableQuery","ssrMode","pollingInfo","clearTimeout","timeout","interval","info","maybeFetch","poll","assumeImmutableResults","errors","useDisposableConcast","oldVariables","oldFetchPolicy","mergedOptions","assign","applyNextFetchPolicy","finishWaitingForOwnResult","concast","fetch","fromLink","reportResult","reportError","removeObserver","addObserver","reobserveAsConcast","promise","getCurrentResult","lastError","getLastError","isDifferentFromLastResult","errorResult","graphQLErrors","stopPolling","forEach","clear","stopQuery","obsQuery","apply","arguments"],"sourceRoot":"","sources":["../../src/core/ObservableQuery.ts"],"sourcesContent":["import { invariant } from '../utilities/globals';\nimport { DocumentNode } from 'graphql';\nimport { equal } from '@wry/equality';\n\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport {\n  Concast,\n  cloneDeep,\n  compact,\n  getOperationDefinition,\n  Observable,\n  Observer,\n  ObservableSubscription,\n  iterateObserversSafely,\n  isNonEmptyArray,\n  fixObservableSubclass,\n  getQueryDefinition,\n} from '../utilities';\nimport { ApolloError } from '../errors';\nimport { QueryManager } from './QueryManager';\nimport {\n  ApolloQueryResult,\n  OperationVariables,\n  TypedDocumentNode,\n} from './types';\nimport {\n  WatchQueryOptions,\n  FetchMoreQueryOptions,\n  SubscribeToMoreOptions,\n  NextFetchPolicyContext,\n  WatchQueryFetchPolicy,\n} from './watchQueryOptions';\nimport { QueryInfo } from './QueryInfo';\nimport { MissingFieldError } from '../cache';\nimport { MissingTree } from '../cache/core/types/common';\n\nconst {\n  assign,\n  hasOwnProperty,\n} = Object;\n\nexport interface FetchMoreOptions<\n  TData = any,\n  TVariables = OperationVariables\n> {\n  updateQuery?: (\n    previousQueryResult: TData,\n    options: {\n      fetchMoreResult?: TData;\n      variables?: TVariables;\n    },\n  ) => TData;\n}\n\nexport interface UpdateQueryOptions<TVariables> {\n  variables?: TVariables;\n}\n\ninterface Last<TData, TVariables> {\n  result: ApolloQueryResult<TData>;\n  variables?: TVariables;\n  error?: ApolloError;\n}\n\nexport class ObservableQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables\n> extends Observable<ApolloQueryResult<TData>> {\n  public readonly options: WatchQueryOptions<TVariables, TData>;\n  public readonly queryId: string;\n  public readonly queryName?: string;\n\n  public get query(): TypedDocumentNode<TData, TVariables> {\n    // This transform is heavily cached, so it should not be expensive to\n    // transform the same this.options.query document repeatedly.\n    return this.queryManager.transform(this.options.query).document;\n  }\n\n  // Computed shorthand for this.options.variables, preserved for\n  // backwards compatibility.\n  public get variables(): TVariables | undefined {\n    return this.options.variables;\n  }\n\n  private isTornDown: boolean;\n  private queryManager: QueryManager<any>;\n  private observers = new Set<Observer<ApolloQueryResult<TData>>>();\n  private subscriptions = new Set<ObservableSubscription>();\n\n  private waitForOwnResult: boolean;\n  private last?: Last<TData, TVariables>;\n\n  private queryInfo: QueryInfo;\n\n  // When this.concast is defined, this.observer is the Observer currently\n  // subscribed to that Concast.\n  private concast?: Concast<ApolloQueryResult<TData>>;\n  private observer?: Observer<ApolloQueryResult<TData>>;\n\n  private pollingInfo?: {\n    interval: number;\n    timeout: ReturnType<typeof setTimeout>;\n  };\n\n  constructor({\n    queryManager,\n    queryInfo,\n    options,\n  }: {\n    queryManager: QueryManager<any>;\n    queryInfo: QueryInfo;\n    options: WatchQueryOptions<TVariables, TData>;\n  }) {\n    super((observer: Observer<ApolloQueryResult<TData>>) => {\n      // Zen Observable has its own error function, so in order to log correctly\n      // we need to provide a custom error callback.\n      try {\n        var subObserver = (observer as any)._subscription._observer;\n        if (subObserver && !subObserver.error) {\n          subObserver.error = defaultSubscriptionObserverErrorCallback;\n        }\n      } catch {}\n\n      const first = !this.observers.size;\n      this.observers.add(observer);\n\n      // Deliver most recent error or result.\n      const last = this.last;\n      if (last && last.error) {\n        observer.error && observer.error(last.error);\n      } else if (last && last.result) {\n        observer.next && observer.next(last.result);\n      }\n\n      // Initiate observation of this query if it hasn't been reported to\n      // the QueryManager yet.\n      if (first) {\n        // Blindly catching here prevents unhandled promise rejections,\n        // and is safe because the ObservableQuery handles this error with\n        // this.observer.error, so we're not just swallowing the error by\n        // ignoring it here.\n        this.reobserve().catch(() => {});\n      }\n\n      return () => {\n        if (this.observers.delete(observer) && !this.observers.size) {\n          this.tearDownQuery();\n        }\n      };\n    });\n\n    // related classes\n    this.queryInfo = queryInfo;\n    this.queryManager = queryManager;\n\n    // active state\n    this.waitForOwnResult = skipCacheDataFor(options.fetchPolicy);\n    this.isTornDown = false;\n\n    const {\n      watchQuery: {\n        fetchPolicy: defaultFetchPolicy = \"cache-first\",\n      } = {},\n    } = queryManager.defaultOptions;\n\n    const {\n      fetchPolicy = defaultFetchPolicy,\n      initialFetchPolicy = (\n        // Make sure we don't store \"standby\" as the initialFetchPolicy.\n        fetchPolicy === \"standby\" ? defaultFetchPolicy : fetchPolicy\n      ),\n    } = options;\n\n    this.options = {\n      ...options,\n\n      // Remember the initial options.fetchPolicy so we can revert back to this\n      // policy when variables change. This information can also be specified\n      // (or overridden) by providing options.initialFetchPolicy explicitly.\n      initialFetchPolicy,\n\n      // This ensures this.options.fetchPolicy always has a string value, in\n      // case options.fetchPolicy was not provided.\n      fetchPolicy,\n    };\n\n    this.queryId = queryInfo.queryId || queryManager.generateQueryId();\n\n    const opDef = getOperationDefinition(this.query);\n    this.queryName = opDef && opDef.name && opDef.name.value;\n  }\n\n  public result(): Promise<ApolloQueryResult<TData>> {\n    return new Promise((resolve, reject) => {\n      // TODO: this code doesn’t actually make sense insofar as the observer\n      // will never exist in this.observers due how zen-observable wraps observables.\n      // https://github.com/zenparsing/zen-observable/blob/master/src/Observable.js#L169\n      const observer: Observer<ApolloQueryResult<TData>> = {\n        next: (result: ApolloQueryResult<TData>) => {\n          resolve(result);\n\n          // Stop the query within the QueryManager if we can before\n          // this function returns.\n          //\n          // We do this in order to prevent observers piling up within\n          // the QueryManager. Notice that we only fully unsubscribe\n          // from the subscription in a setTimeout(..., 0)  call. This call can\n          // actually be handled by the browser at a much later time. If queries\n          // are fired in the meantime, observers that should have been removed\n          // from the QueryManager will continue to fire, causing an unnecessary\n          // performance hit.\n          this.observers.delete(observer);\n          if (!this.observers.size) {\n            this.queryManager.removeQuery(this.queryId);\n          }\n\n          setTimeout(() => {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject,\n      };\n      const subscription = this.subscribe(observer);\n    });\n  }\n\n  public getCurrentResult(saveAsLastResult = true): ApolloQueryResult<TData> {\n    // Use the last result as long as the variables match this.variables.\n    const lastResult = this.getLastResult(true);\n\n    const networkStatus =\n      this.queryInfo.networkStatus ||\n      (lastResult && lastResult.networkStatus) ||\n      NetworkStatus.ready;\n\n    const result = {\n      ...lastResult,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus,\n    } as ApolloQueryResult<TData>;\n\n    const { fetchPolicy = \"cache-first\" } = this.options;\n    if (\n      // These fetch policies should never deliver data from the cache, unless\n      // redelivering a previously delivered result.\n      skipCacheDataFor(fetchPolicy) ||\n      // If this.options.query has @client(always: true) fields, we cannot\n      // trust diff.result, since it was read from the cache without running\n      // local resolvers (and it's too late to run resolvers now, since we must\n      // return a result synchronously).\n      this.queryManager.transform(this.options.query).hasForcedResolvers\n    ) {\n      // Fall through. \n    } else if (this.waitForOwnResult) {\n      // This would usually be a part of `QueryInfo.getDiff()`. \n      // which we skip in the waitForOwnResult case since we are not\n      // interested in the diff.\n      this.queryInfo['updateWatch']();\n    } else {\n      const diff = this.queryInfo.getDiff();\n\n      if (diff.complete || this.options.returnPartialData) {\n        result.data = diff.result;\n      }\n\n      if (equal(result.data, {})) {\n        result.data = void 0 as any;\n      }\n\n      if (diff.complete) {\n        // Similar to setting result.partial to false, but taking advantage of the\n        // falsiness of missing fields.\n        delete result.partial;\n\n        // If the diff is complete, and we're using a FetchPolicy that\n        // terminates after a complete cache read, we can assume the next result\n        // we receive will have NetworkStatus.ready and !loading.\n        if (\n          diff.complete &&\n          result.networkStatus === NetworkStatus.loading &&\n          (fetchPolicy === 'cache-first' ||\n          fetchPolicy === 'cache-only')\n        ) {\n          result.networkStatus = NetworkStatus.ready;\n          result.loading = false;\n        }\n      } else {\n        result.partial = true;\n      }\n\n      if (\n        __DEV__ &&\n        !diff.complete &&\n        !this.options.partialRefetch &&\n        !result.loading &&\n        !result.data &&\n        !result.error\n      ) {\n        logMissingFieldErrors(diff.missing);\n      }\n    }\n\n    if (saveAsLastResult) {\n      this.updateLastResult(result);\n    }\n\n    return result;\n  }\n\n  // Compares newResult to the snapshot we took of this.lastResult when it was\n  // first received.\n  public isDifferentFromLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables?: TVariables\n  ) {\n    return (\n      !this.last ||\n      !equal(this.last.result, newResult) ||\n      (variables && !equal(this.last.variables, variables))\n    );\n  }\n\n  private getLast<K extends keyof Last<TData, TVariables>>(\n    key: K,\n    variablesMustMatch?: boolean,\n  ) {\n    const last = this.last;\n    if (\n      last &&\n      last[key] &&\n      (!variablesMustMatch || equal(last.variables, this.variables))\n    ) {\n      return last[key];\n    }\n  }\n\n  public getLastResult(variablesMustMatch?: boolean): ApolloQueryResult<TData> | undefined {\n    return this.getLast(\"result\", variablesMustMatch);\n  }\n\n  public getLastError(variablesMustMatch?: boolean): ApolloError | undefined {\n    return this.getLast(\"error\", variablesMustMatch);\n  }\n\n  public resetLastResults(): void {\n    delete this.last;\n    this.isTornDown = false;\n  }\n\n  public resetQueryStoreErrors() {\n    this.queryManager.resetErrors(this.queryId);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results.\n   * This method should be preferred over `setVariables` in most use cases.\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public refetch(variables?: Partial<TVariables>): Promise<ApolloQueryResult<TData>> {\n    const reobserveOptions: Partial<WatchQueryOptions<TVariables, TData>> = {\n      // Always disable polling for refetches.\n      pollInterval: 0,\n    };\n\n    // Unless the provided fetchPolicy always consults the network\n    // (no-cache, network-only, or cache-and-network), override it with\n    // network-only to force the refetch for this fetchQuery call.\n    const { fetchPolicy } = this.options;\n    if (fetchPolicy === 'cache-and-network') {\n      reobserveOptions.fetchPolicy = fetchPolicy;\n    } else if (fetchPolicy === 'no-cache') {\n      reobserveOptions.fetchPolicy = 'no-cache';\n    } else {\n      reobserveOptions.fetchPolicy = 'network-only';\n    }\n\n    if (__DEV__ && variables && hasOwnProperty.call(variables, \"variables\")) {\n      const queryDef = getQueryDefinition(this.query);\n      const vars = queryDef.variableDefinitions;\n      if (!vars || !vars.some(v => v.variable.name.value === \"variables\")) {\n        invariant.warn(`Called refetch(${\n          JSON.stringify(variables)\n        }) for query ${\n          queryDef.name?.value || JSON.stringify(queryDef)\n        }, which does not declare a $variables variable.\nDid you mean to call refetch(variables) instead of refetch({ variables })?`);\n      }\n    }\n\n    if (variables && !equal(this.options.variables, variables)) {\n      // Update the existing options with new variables\n      reobserveOptions.variables = this.options.variables = {\n        ...this.options.variables,\n        ...variables,\n      } as TVariables;\n    }\n\n    this.queryInfo.resetLastWrite();\n    return this.reobserve(reobserveOptions, NetworkStatus.refetch);\n  }\n\n  public fetchMore<\n    TFetchData = TData,\n    TFetchVars extends OperationVariables = TVariables,\n  >(fetchMoreOptions: FetchMoreQueryOptions<TFetchVars, TFetchData> & {\n    updateQuery?: (\n      previousQueryResult: TData,\n      options: {\n        fetchMoreResult: TFetchData;\n        variables: TFetchVars;\n      },\n    ) => TData;\n  }): Promise<ApolloQueryResult<TFetchData>> {\n    const combinedOptions = {\n      ...(fetchMoreOptions.query ? fetchMoreOptions : {\n        ...this.options,\n        query: this.query,\n        ...fetchMoreOptions,\n        variables: {\n          ...this.options.variables,\n          ...fetchMoreOptions.variables,\n        },\n      }),\n      // The fetchMore request goes immediately to the network and does\n      // not automatically write its result to the cache (hence no-cache\n      // instead of network-only), because we allow the caller of\n      // fetchMore to provide an updateQuery callback that determines how\n      // the data gets written to the cache.\n      fetchPolicy: \"no-cache\",\n    } as WatchQueryOptions<TFetchVars, TFetchData>;\n\n    const qid = this.queryManager.generateQueryId();\n\n    // Simulate a loading result for the original query with\n    // result.networkStatus === NetworkStatus.fetchMore.\n    const { queryInfo } = this;\n    const originalNetworkStatus = queryInfo.networkStatus;\n    queryInfo.networkStatus = NetworkStatus.fetchMore;\n    if (combinedOptions.notifyOnNetworkStatusChange) {\n      this.observe();\n    }\n\n    const updatedQuerySet = new Set<DocumentNode>();\n\n    return this.queryManager.fetchQuery(\n      qid,\n      combinedOptions,\n      NetworkStatus.fetchMore,\n    ).then(fetchMoreResult => {\n      this.queryManager.removeQuery(qid);\n\n      if (queryInfo.networkStatus === NetworkStatus.fetchMore) {\n        queryInfo.networkStatus = originalNetworkStatus;\n      }\n\n      // Performing this cache update inside a cache.batch transaction ensures\n      // any affected cache.watch watchers are notified at most once about any\n      // updates. Most watchers will be using the QueryInfo class, which\n      // responds to notifications by calling reobserveCacheFirst to deliver\n      // fetchMore cache results back to this ObservableQuery.\n      this.queryManager.cache.batch({\n        update: cache => {\n          const { updateQuery } = fetchMoreOptions;\n          if (updateQuery) {\n            cache.updateQuery({\n              query: this.query,\n              variables: this.variables,\n              returnPartialData: true,\n              optimistic: false,\n            }, previous => updateQuery(previous!, {\n              fetchMoreResult: fetchMoreResult.data,\n              variables: combinedOptions.variables as TFetchVars,\n            }));\n\n          } else {\n            // If we're using a field policy instead of updateQuery, the only\n            // thing we need to do is write the new data to the cache using\n            // combinedOptions.variables (instead of this.variables, which is\n            // what this.updateQuery uses, because it works by abusing the\n            // original field value, keyed by the original variables).\n            cache.writeQuery({\n              query: combinedOptions.query,\n              variables: combinedOptions.variables,\n              data: fetchMoreResult.data,\n            });\n          }\n        },\n\n        onWatchUpdated: watch => {\n          // Record the DocumentNode associated with any watched query whose\n          // data were updated by the cache writes above.\n          updatedQuerySet.add(watch.query);\n        },\n      });\n\n      return fetchMoreResult;\n\n    }).finally(() => {\n      // In case the cache writes above did not generate a broadcast\n      // notification (which would have been intercepted by onWatchUpdated),\n      // likely because the written data were the same as what was already in\n      // the cache, we still want fetchMore to deliver its final loading:false\n      // result with the unchanged data.\n      if (!updatedQuerySet.has(this.query)) {\n        reobserveCacheFirst(this);\n      }\n    });\n  }\n\n  // XXX the subscription variables are separate from the query variables.\n  // if you want to update subscription variables, right now you have to do that separately,\n  // and you can only do it by stopping the subscription and then subscribing again with new variables.\n  public subscribeToMore<\n    TSubscriptionData = TData,\n    TSubscriptionVariables extends OperationVariables = TVariables\n  >(\n    options: SubscribeToMoreOptions<\n      TData,\n      TSubscriptionVariables,\n      TSubscriptionData\n    >,\n  ) {\n    const subscription = this.queryManager\n      .startGraphQLSubscription({\n        query: options.document,\n        variables: options.variables,\n        context: options.context,\n      })\n      .subscribe({\n        next: (subscriptionData: { data: TSubscriptionData }) => {\n          const { updateQuery } = options;\n          if (updateQuery) {\n            this.updateQuery<TSubscriptionVariables>(\n              (previous, { variables }) =>\n                updateQuery(previous, {\n                  subscriptionData,\n                  variables,\n                }),\n            );\n          }\n        },\n        error: (err: any) => {\n          if (options.onError) {\n            options.onError(err);\n            return;\n          }\n          invariant.error('Unhandled GraphQL subscription error', err);\n        },\n      });\n\n    this.subscriptions.add(subscription);\n\n    return () => {\n      if (this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  }\n\n  public setOptions(\n    newOptions: Partial<WatchQueryOptions<TVariables, TData>>,\n  ): Promise<ApolloQueryResult<TData>> {\n    return this.reobserve(newOptions);\n  }\n\n  /**\n   * Update the variables of this observable query, and fetch the new results\n   * if they've changed. Most users should prefer `refetch` instead of\n   * `setVariables` in order to to be properly notified of results even when\n   * they come from the cache.\n   *\n   * Note: the `next` callback will *not* fire if the variables have not changed\n   * or if the result is coming from cache.\n   *\n   * Note: the promise will return the old results immediately if the variables\n   * have not changed.\n   *\n   * Note: the promise will return null immediately if the query is not active\n   * (there are no subscribers).\n   *\n   * @private\n   *\n   * @param variables: The new set of variables. If there are missing variables,\n   * the previous values of those variables will be used.\n   */\n  public setVariables(\n    variables: TVariables,\n  ): Promise<ApolloQueryResult<TData> | void> {\n    if (equal(this.variables, variables)) {\n      // If we have no observers, then we don't actually want to make a network\n      // request. As soon as someone observes the query, the request will kick\n      // off. For now, we just store any changes. (See #1077)\n      return this.observers.size\n        ? this.result()\n        : Promise.resolve();\n    }\n\n    this.options.variables = variables;\n\n    // See comment above\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n\n    return this.reobserve({\n      // Reset options.fetchPolicy to its original value.\n      fetchPolicy: this.options.initialFetchPolicy,\n      variables,\n    }, NetworkStatus.setVariables);\n  }\n\n  public updateQuery<TVars extends OperationVariables = TVariables>(\n    mapFn: (\n      previousQueryResult: TData,\n      options: Pick<WatchQueryOptions<TVars, TData>, \"variables\">,\n    ) => TData,\n  ): void {\n    const { queryManager } = this;\n    const { result } = queryManager.cache.diff<TData>({\n      query: this.options.query,\n      variables: this.variables,\n      returnPartialData: true,\n      optimistic: false,\n    });\n\n    const newResult = mapFn(result!, {\n      variables: (this as any).variables,\n    });\n\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables,\n      });\n\n      queryManager.broadcastQueries();\n    }\n  }\n\n  public startPolling(pollInterval: number) {\n    this.options.pollInterval = pollInterval;\n    this.updatePolling();\n  }\n\n  public stopPolling() {\n    this.options.pollInterval = 0;\n    this.updatePolling();\n  }\n\n  // Update options.fetchPolicy according to options.nextFetchPolicy.\n  private applyNextFetchPolicy(\n    reason: NextFetchPolicyContext<TData, TVariables>[\"reason\"],\n    // It's possible to use this method to apply options.nextFetchPolicy to\n    // options.fetchPolicy even if options !== this.options, though that happens\n    // most often when the options are temporary, used for only one request and\n    // then thrown away, so nextFetchPolicy may not end up mattering.\n    options: WatchQueryOptions<TVariables, TData>,\n  ) {\n    if (options.nextFetchPolicy) {\n      const {\n        fetchPolicy = \"cache-first\",\n        initialFetchPolicy = fetchPolicy,\n      } = options;\n\n      if (fetchPolicy === \"standby\") {\n        // Do nothing, leaving options.fetchPolicy unchanged.\n      } else if (typeof options.nextFetchPolicy === \"function\") {\n        // When someone chooses \"cache-and-network\" or \"network-only\" as their\n        // initial FetchPolicy, they often do not want future cache updates to\n        // trigger unconditional network requests, which is what repeatedly\n        // applying the \"cache-and-network\" or \"network-only\" policies would\n        // seem to imply. Instead, when the cache reports an update after the\n        // initial network request, it may be desirable for subsequent network\n        // requests to be triggered only if the cache result is incomplete. To\n        // that end, the options.nextFetchPolicy option provides an easy way to\n        // update options.fetchPolicy after the initial network request, without\n        // having to call observableQuery.setOptions.\n        options.fetchPolicy = options.nextFetchPolicy(fetchPolicy, {\n          reason,\n          options,\n          observable: this,\n          initialFetchPolicy,\n        });\n      } else if (reason === \"variables-changed\") {\n        options.fetchPolicy = initialFetchPolicy;\n      } else {\n        options.fetchPolicy = options.nextFetchPolicy;\n      }\n    }\n\n    return options.fetchPolicy;\n  }\n\n  private fetch(\n    options: WatchQueryOptions<TVariables, TData>,\n    newNetworkStatus?: NetworkStatus,\n  ) {\n    // TODO Make sure we update the networkStatus (and infer fetchVariables)\n    // before actually committing to the fetch.\n    this.queryManager.setObservableQuery(this);\n    return this.queryManager['fetchConcastWithInfo'](\n      this.queryId,\n      options,\n      newNetworkStatus,\n    );\n  }\n\n  // Turns polling on or off based on this.options.pollInterval.\n  private updatePolling() {\n    // Avoid polling in SSR mode\n    if (this.queryManager.ssrMode) {\n      return;\n    }\n\n    const {\n      pollingInfo,\n      options: {\n        pollInterval,\n      },\n    } = this;\n\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n\n    if (pollingInfo &&\n        pollingInfo.interval === pollInterval) {\n      return;\n    }\n\n    invariant(\n      pollInterval,\n      'Attempted to start a polling query without a polling interval.',\n    );\n\n    const info = pollingInfo || (this.pollingInfo = {} as any);\n    info.interval = pollInterval;\n\n    const maybeFetch = () => {\n      if (this.pollingInfo) {\n        if (!isNetworkRequestInFlight(this.queryInfo.networkStatus)) {\n          this.reobserve({\n            // Most fetchPolicy options don't make sense to use in a polling context, as\n            // users wouldn't want to be polling the cache directly. However, network-only and\n            // no-cache are both useful for when the user wants to control whether or not the\n            // polled results are written to the cache.\n            fetchPolicy: this.options.initialFetchPolicy === 'no-cache' ? 'no-cache' : 'network-only',\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      };\n    };\n\n    const poll = () => {\n      const info = this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n\n    poll();\n  }\n\n  private updateLastResult(\n    newResult: ApolloQueryResult<TData>,\n    variables = this.variables,\n  ) {\n    this.last = {\n      ...this.last,\n      result: this.queryManager.assumeImmutableResults\n        ? newResult\n        : cloneDeep(newResult),\n      variables,\n    };\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.last.error;\n    }\n    return this.last;\n  }\n\n  public reobserveAsConcast(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ): Concast<ApolloQueryResult<TData>> {\n    this.isTornDown = false;\n\n    const useDisposableConcast =\n      // Refetching uses a disposable Concast to allow refetches using different\n      // options/variables, without permanently altering the options of the\n      // original ObservableQuery.\n      newNetworkStatus === NetworkStatus.refetch ||\n      // The fetchMore method does not actually call the reobserve method, but,\n      // if it did, it would definitely use a disposable Concast.\n      newNetworkStatus === NetworkStatus.fetchMore ||\n      // Polling uses a disposable Concast so the polling options (which force\n      // fetchPolicy to be \"network-only\" or \"no-cache\") won't override the original options.\n      newNetworkStatus === NetworkStatus.poll;\n\n    // Save the old variables, since Object.assign may modify them below.\n    const oldVariables = this.options.variables;\n    const oldFetchPolicy = this.options.fetchPolicy;\n\n    const mergedOptions = compact(this.options, newOptions || {});\n    const options = useDisposableConcast\n      // Disposable Concast fetches receive a shallow copy of this.options\n      // (merged with newOptions), leaving this.options unmodified.\n      ? mergedOptions\n      : assign(this.options, mergedOptions);\n\n    if (!useDisposableConcast) {\n      // We can skip calling updatePolling if we're not changing this.options.\n      this.updatePolling();\n\n      // Reset options.fetchPolicy to its original value when variables change,\n      // unless a new fetchPolicy was provided by newOptions.\n      if (\n        newOptions &&\n        newOptions.variables &&\n        !equal(newOptions.variables, oldVariables) &&\n        // Don't mess with the fetchPolicy if it's currently \"standby\".\n        options.fetchPolicy !== \"standby\" &&\n        // If we're changing the fetchPolicy anyway, don't try to change it here\n        // using applyNextFetchPolicy. The explicit options.fetchPolicy wins.\n        options.fetchPolicy === oldFetchPolicy\n      ) {\n        this.applyNextFetchPolicy(\"variables-changed\", options);\n        if (newNetworkStatus === void 0) {\n          newNetworkStatus = NetworkStatus.setVariables;\n        }\n      }\n    }\n\n    this.waitForOwnResult &&= skipCacheDataFor(options.fetchPolicy);\n    const finishWaitingForOwnResult = () => {\n      if (this.concast === concast) {\n        this.waitForOwnResult = false;\n      }\n    };\n    \n    const variables = options.variables && { ...options.variables };\n    const { concast, fromLink } = this.fetch(options, newNetworkStatus);\n    const observer: Observer<ApolloQueryResult<TData>> = {\n      next: result => {\n        finishWaitingForOwnResult();\n        this.reportResult(result, variables);\n      },\n      error: error => {\n        finishWaitingForOwnResult();\n        this.reportError(error, variables);\n      },\n    };\n\n    if (!useDisposableConcast && fromLink) {\n      // We use the {add,remove}Observer methods directly to avoid wrapping\n      // observer with an unnecessary SubscriptionObserver object.\n      if (this.concast && this.observer) {\n        this.concast.removeObserver(this.observer);\n      }\n\n      this.concast = concast;\n      this.observer = observer;\n    }\n\n    concast.addObserver(observer);\n\n    return concast;\n  }\n\n  public reobserve(\n    newOptions?: Partial<WatchQueryOptions<TVariables, TData>>,\n    newNetworkStatus?: NetworkStatus,\n  ) {\n    return this.reobserveAsConcast(newOptions, newNetworkStatus).promise;\n  }\n\n  // (Re)deliver the current result to this.observers without applying fetch\n  // policies or making network requests.\n  private observe() {\n    this.reportResult(\n      // Passing false is important so that this.getCurrentResult doesn't\n      // save the fetchMore result as this.lastResult, causing it to be\n      // ignored due to the this.isDifferentFromLastResult check in\n      // this.reportResult.\n      this.getCurrentResult(false),\n      this.variables,\n    );\n  }\n\n  private reportResult(\n    result: ApolloQueryResult<TData>,\n    variables: TVariables | undefined,\n  ) {\n    const lastError = this.getLastError();\n    if (lastError || this.isDifferentFromLastResult(result, variables)) {\n      if (lastError || !result.partial || this.options.returnPartialData) {\n        this.updateLastResult(result, variables);\n      }\n\n      iterateObserversSafely(this.observers, 'next', result);\n    }\n  }\n\n  private reportError(\n    error: ApolloError,\n    variables: TVariables | undefined,\n  ) {\n    // Since we don't get the current result on errors, only the error, we\n    // must mirror the updates that occur in QueryStore.markQueryError here\n    const errorResult = {\n      ...this.getLastResult(),\n      error,\n      errors: error.graphQLErrors,\n      networkStatus: NetworkStatus.error,\n      loading: false,\n    } as ApolloQueryResult<TData>;\n\n    this.updateLastResult(errorResult, variables);\n\n    iterateObserversSafely(this.observers, 'error', this.last!.error = error);\n  }\n\n  public hasObservers() {\n    return this.observers.size > 0;\n  }\n\n  private tearDownQuery() {\n    if (this.isTornDown) return;\n    if (this.concast && this.observer) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n      delete this.observer;\n    }\n\n    this.stopPolling();\n    // stop all active GraphQL subscriptions\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n    this.subscriptions.clear();\n    this.queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n    this.isTornDown = true;\n  }\n}\n\n// Necessary because the ObservableQuery constructor has a different\n// signature than the Observable constructor.\nfixObservableSubclass(ObservableQuery);\n\n// Reobserve with fetchPolicy effectively set to \"cache-first\", triggering\n// delivery of any new data from the cache, possibly falling back to the network\n// if any cache data are missing. This allows _complete_ cache results to be\n// delivered without also kicking off unnecessary network requests when\n// this.options.fetchPolicy is \"cache-and-network\" or \"network-only\". When\n// this.options.fetchPolicy is any other policy (\"cache-first\", \"cache-only\",\n// \"standby\", or \"no-cache\"), we call this.reobserve() as usual.\nexport function reobserveCacheFirst<TData, TVars extends OperationVariables>(\n  obsQuery: ObservableQuery<TData, TVars>,\n) {\n  const { fetchPolicy, nextFetchPolicy } = obsQuery.options;\n\n  if (\n    fetchPolicy === \"cache-and-network\" ||\n    fetchPolicy === \"network-only\"\n  ) {\n    return obsQuery.reobserve({\n      fetchPolicy: \"cache-first\",\n      // Use a temporary nextFetchPolicy function that replaces itself with the\n      // previous nextFetchPolicy value and returns the original fetchPolicy.\n      nextFetchPolicy(this: WatchQueryOptions<TVars, TData>) {\n        // Replace this nextFetchPolicy function in the options object with the\n        // original this.options.nextFetchPolicy value.\n        this.nextFetchPolicy = nextFetchPolicy;\n        // If the original nextFetchPolicy value was a function, give it a\n        // chance to decide what happens here.\n        if (typeof nextFetchPolicy === \"function\") {\n          return nextFetchPolicy.apply(this, arguments);\n        }\n        // Otherwise go back to the original this.options.fetchPolicy.\n        return fetchPolicy!;\n      },\n    });\n  }\n\n  return obsQuery.reobserve();\n}\n\nfunction defaultSubscriptionObserverErrorCallback(error: ApolloError) {\n  invariant.error('Unhandled error', error.message, error.stack);\n}\n\nexport function logMissingFieldErrors(\n  missing: MissingFieldError[] | MissingTree | undefined,\n) {\n  if (__DEV__ && missing) {\n    invariant.debug(`Missing cache result fields: ${\n      JSON.stringify(missing)\n    }`, missing);\n  }\n}\n\nfunction skipCacheDataFor(fetchPolicy?: WatchQueryFetchPolicy /* `undefined` would mean `\"cache-first\"` */) {\n  return fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\" || fetchPolicy === \"standby\";\n}\n"]},"metadata":{},"sourceType":"module"}